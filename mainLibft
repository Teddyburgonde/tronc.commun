ft_isalpha ft_isdigit ft_asalnum ft_isascii ft_isprint 
int	main(int argc, char **argv)
{
	int	i;

	i = 0;
	if (argc == 2)
	{
		while (argv[1][i])
		{
			if ((argv[1][i]))
				write (1, "ok\n", 3);
			else
				write (1, "NO\n",3);
			i++;
		}
	}
}

ft_strlen 

#include <stdio.h>
int	main(void)
{
	char	tab[] = "salut";
	printf("%d", ft_strlen(tab));
}


ft_memset 

#include <stdio.h>
//#include <string.h>

int	main(int argc, char **argv)
{
	unsigned int	n;
	char	letter;

	letter = 'Z';
	n = 3;

	if (argc == 2)
	{
		ft_memset(argv[1], letter, n);
		printf("%s", argv[1]);
	}
	//memset(argv[1], letter, 3);
	//printf("%s", argv[1]);
}

ft_bzero 

#include <string.h>
#include <stdio.h>
int	main(void)
{
	char	tab[] = "salut";
	//ft_bzero(tab, 3);
	//printf("%s\n", tab);
	bzero(tab, 3);
	printf("%s", tab);
}

ft_memcpy
#include <stdio.h>
int	main(int argc, char **argv)
{
	if (argc == 3)
	{
		ft_memcpy(argv[1], argv[2], 3);
		printf("%s", argv[1]);
	}
}

ft_memmove

#include <string.h>
#include <stdio.h>
int	main(int argc, char **argv)
{
	if (argc == 3)
	{
		memmove(argv[1], argv[2], 3);
		printf("%s", argv[1]);
	}
}

ft_strlcpy
// cette fonction copie src dans dest mais en vérifiant qu'on ne dépasse pas la capacité que dest peut recevoir
// elle retourne la taille de src;

#include <stdio.h>
int	main(int argc, char **argv)
{
	if (argc == 3)
	{
		printf("%ld", ft_strlcpy(argv[1], argv[2], 3));
	}
}

ft_strlcat

#include <stdio.h>

int	main(int argc, char **argv)
{
	if (argc == 3)
	{
		printf("%ld", ft_strlcat(argv[1], argv[2], 3));
	}
}

ft_toupper 

#include <stdio.h>
int	main(void)
{
	int	a;

	a = 'b';
	printf("%c", ft_toupper(a));
}

ft_tolower 


#include <stdio.h>
int	main(void)
{
	int	a;

	a = 'a';
	printf("%c", ft_tolower(a));
}

ft_strchr



#include <string.h>
#include <stdio.h>
int	main(void)
{
	char test[] = "salut";
	int	c;

	c = 'a';
	printf("%s\n", strchr(test, c));
	printf("%s", ft_strchr(test, c));
}

ft_strrchr


#include <string.h>
#include <stdio.h>
int	main(int argc, char **argv)
{
	if (argc == 2)
	{
		printf("%s\n", strrchr(argv[1], 'r'));
		printf("%s", ft_strrchr(argv[1], 'r'));
	}
}

ft_strncmp 

#include <string.h>
#include <stdio.h>

int	main(int argc, char **argv)
{
	if (argc == 3)
	{
		printf("%d\n", ft_strncmp(argv[1], argv[2], 3));
		printf("%d\n", strncmp(argv[1], argv[2], 3));
	}
}

ft_memchr

#include <string.h>
#include <stdio.h>
int	main(void)
{
	char	test[] = "salut";
	size_t	n;

	n = 9;
	printf("%s\n", memchr(test, 'a', n) ? "TRUE":"FALSE");
	printf("%s", ft_memchr(test, 'a', n) ? "TRUE":"FALSE");
}

ft_memcmp 

#include <string.h>
#include <stdio.h>

int	main(int argc, char **argv)
{
	if (argc == 3)
	{
		printf("%d\n", ft_memcmp(argv[1], argv[2], 3));
		printf("%d\n", memcmp(argv[1], argv[2], 3));
	}
}

ft_strnstr

#include <string.h>
#include <stdio.h>

int	main(int argc, char **argv)
{
	size_t max_len = strlen(argv[1]);
	if (argc == 3)
	{
		printf("%s\n", ft_strnstr(argv[1], argv[2], max_len));
		printf("%s", strnstr(argv[1], argv[2], max_len));
		//printf("%s\n", ft_strnstr(argv[1], argv[2], 5));
		//printf("%s", strnstr(argv[1], argv[2], 5));
	}
}

ft_atoi 



#include <stdlib.h>
#include <stdio.h>

int	main(int argc, char **argv)
{

	if (argc == 2)
	{
		printf("%d\n", ft_atoi(argv[1]));
		printf("%d", atoi(argv[1]));

	}
}

ft_calloc 

#include <stdio.h>
int	main(void)
{
	int *ptr = ft_calloc(2, 12);
	
	if (ptr == NULL)
	{
		printf("ERROR");
	}
	else
		printf("Memoire allouer");
}

ft_strdup 


#include <stdio.h>
int	main(void)
{
	const char	s1[] = "salut";
	char	*tab;


	tab = ft_strdup(s1);
	printf("%s", tab);
	free(tab);
}

ft_substr

#include <stdio.h>
int	main(void)
{
	char	s[] = "salutles";
	char	*tab;

	tab = ft_substr(s, 3, 12);
	printf("%s", tab);
	free(tab);
}

ft_strjoin


#include <stdio.h>
int	main(void)
{
	const char	s3[] = "salut";
	const char	s4[] = "les amis";

	printf("%s", ft_strjoin(s3, s4));

}

ft_strtrim

#include <stdio.h>

int	main(void)
{
	char *tab;

	char	s1[] = "xXXx_bonjourxlesamis_xXXx";
	char	set[] = "xXXx";
	tab = ft_strtrim(s1, set);
	printf("%s", tab);
	free(tab);
}

ft_split 

#include <stdio.h>
int	main(int argc, char **argv)
{
	int	i;

	i = 0;
	char	**tab;
	(void)argc;
	tab = ft_split(argv[1], argv[2][0]); 
	while (tab[i])
	{
		printf("|%s| ", tab[i]);
		i++;
	}
	free(tab);
	return 0;
}

ft_itoa

#include <stdio.h>

int	main(void)
{
	printf("%s", ft_itoa(879900));
}

ft_strmapi

#include <stdio.h>
int	main(void)
{
	char *tab;

	tab = "salut";
	printf("%s", ft_strmapi(tab, change));
	free(tab);
}

ft_striteri 

#include <stdio.h>

int	main(void)
{
	char	tab[] = "salut";

	printf("%s\n", tab);
	ft_striteri(tab, &function1);
	printf("%s\n", tab);
}

ft_putchar_fd 

#include <fcntl.h>

int	main(void)
{

	char	c;
	int		fd;

	c = 'A';
	fd = open("test.txt", O_WRONLY | O_CREAT, 0640);
	ft_putchar_fd(c, fd);
	close(fd);
}

ft_putstr_fd 

#include <fcntl.h>

int	main(void)
{
	char	str[] = "salut";
	int		fd;

	fd = open("test.txt", O_WRONLY | O_CREAT, 0640);
	ft_putstr_fd(str, fd);
	close(fd);
}

ft_putendl_fd


#include <fcntl.h>
int	main(void)
{
	int	fd;
	char	tab[] = "salut les amis";
	char	tab2[] = "aujourd'hui est un grand jour";

	fd = open("testons.txt", O_WRONLY | O_CREAT, 0777);
	ft_putendl_fd(tab, fd);
	ft_putendl_fd(tab2, fd);
	close(fd);
}
